<?php
// $Id: browscap.module,v 1.6.2.3.2.11 2009/09/30 17:16:40 greggles Exp $

/**
 * @file
 * Replacement for PHP's get_browser() function
 */

/**
 * Implements hook_menu().
 */
function browscap_menu() {
  $items['admin/reports/browscap'] = array(
    'title' => 'Browscap',
    'description' => 'Browser-specific site statistics.',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('all'),
    'access arguments' => array('access site reports'),
    'weight' => 5,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.inc',
  );
  $items['admin/reports/browscap/useragents'] = array(
    'title' => 'All user agents',
    'access arguments' => array('access site reports'),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/browscap/useragent/%browscap_useragent'] = array(
    'title callback' => 'browscap_useragent_title',
    'title arguments' => array(4),
    'page callback' => 'browscap_useragent_properties',
    'page arguments' => array(4),
    'access arguments' => array('access site reports'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/reports/browscap/browsers'] = array(
    'title' => 'Browsers',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('browsers'),
    'access arguments' => array('access site reports'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/reports/browscap/crawlers'] = array(
    'title' => 'Crawlers',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('crawlers'),
    'access arguments' => array('access site reports'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );

  $items['admin/reports/browscap/settings'] = array(
    'title' => 'Settings',
    'description' => 'Enable browscap site statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('browscap_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );

  return $items;
}

/**
 * Title callback for the useragent page.
 */
function browscap_useragent_title(array $useragent) {
  return check_plain($useragent['browser'] . ' ' . $useragent['version']);
}

/**
 * Implements hook_exit().
 *
 * Keep tabs on browsers that visit
 */
function browscap_exit() {
  // If monitoring is enabled, record the browser
  if (variable_get('browscap_monitor', FALSE)) {
    if ($browser = browscap_get_browser()) {
      $browserstring = substr(trim($browser['parent']), 0, 255);
      if ($browserstring == '' or $browserstring == 'Default Browser') {
        $browserstring = trim($_SERVER['HTTP_USER_AGENT']);
      }
      if (empty($browser['crawler'])) {
        $browser['crawler'] = 0;
      }
      db_merge('browscap_statistics')
        ->key(array('parent' => $browserstring))
        ->fields(array(
          'counter' => 1,
          'is_crawler' => $browser['crawler'],
        ))
        ->expression('counter', 'counter + 1')
        ->execute();
    }
  }
}

/**
 * Implements hook_cron().
 */
function browscap_cron() {
  // Has it been a week since the last (attempt to) import?
  $last_imported = variable_get('browscap_imported', 0);
  if (($last_imported + 60*60*24*7) < REQUEST_TIME) {
    _browscap_import();
    variable_set('browscap_imported', REQUEST_TIME);
  }
}

/**
 * Loads details about a given useragent. Also used as a menu object loader.
 *
 * @param $useragent
 *   The name of the useragent to load.
 * @return
 *   The useragent array, FALSE otherwise.
 */
function browscap_useragent_load($useragent = NULL) {
  if (empty($useragent)) {
    return FALSE;
  }
  $record = db_select('browscap', 'b')
    ->fields('b')
    ->condition('useragent', $useragent)
    ->execute()
    ->fetchObject();
  if (!$record) {
    return FALSE;
  }
  return unserialize($record->data);
}

/**
 * Provide data about the current browser or a known user agent string.
 *
 * @param string $useragent
 *   Optional user agent string to test.  If empty use the value from the current request.
 * @return array
 *  An array of data about the user agent.
 */
function browscap_get_browser($useragent = NULL) {
  if (!$useragent) {
    $useragent = $_SERVER['HTTP_USER_AGENT'];
  }
  // Cache the results
  $cacheid = $useragent;
  $cache = cache_get($cacheid, 'cache_browscap');
  if ((!empty($cache)) && ($cache->created > REQUEST_TIME - 60*60*24)) {
    // Found a fresh entry in the cache
    $browserinfo = $cache->data;
  }
  else {
    // Note the 'backwards' use of LIKE - the useragent column contains
    // the wildcarded pattern to match against our full-length string
    // The ORDER BY chooses the most-specific matching pattern
    $browserinfo = db_query("SELECT * FROM {browscap} WHERE :useragent LIKE useragent ORDER BY LENGTH(useragent) DESC",
      array(':useragent' => $useragent))
      ->fetchObject();
    // A couple of fieldnames not in our database, provided for
    // compatibility with PHP's get_browser()
    //$browserinfo->tables = $browserinfo->htmltables;
    cache_set($cacheid, $browserinfo, 'cache_browscap');
  }
  if (isset($browserinfo) && isset($browserinfo->data)) {
    $info = unserialize($browserinfo->data);
    $info['useragent'] = $useragent;
    $info['browser_name_pattern'] = strtr($browserinfo->useragent, '%_', '*?');
    return $info;
  }
}

/**
 * Determine whether the current visitor
 *
 * @param string $useragent
 *   Optional user agent string.
 */
function browscap_is_crawler($useragent = NULL) {
  $browser = browscap_get_browser($useragent);
  return (bool)$browser['crawler'];
}
